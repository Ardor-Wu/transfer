#!/bin/bash
# For exp 1

# Function to clean up background jobs
cleanup() {
    echo "Interrupt received. Killing background processes..."
    kill -- -$$
    exit 1
}

# Set trap to catch SIGINT
trap 'cleanup' SIGINT

# Arrays of parameters
nums=(1 2 5 10 20 30 40 50)
targets=("mbrs")
gpus=(3)  # GPUs to use

# Set target lengths for each target
declare -A target_lengths=(
    ["RivaGAN"]=32
    ["mbrs"]=256
    ["hidden"]=30
    ["stega"]=100
)

# Declare arrays for commands per GPU
for gpu in "${gpus[@]}"; do
    declare -a "commands_gpu$gpu=()"
done

# Keep track of the task index for GPU assignment
task_index=0

# Loop over targets and nums to create tasks
for target in "${targets[@]}"; do
    target_length="${target_lengths[$target]}"
    for n in "${nums[@]}"; do
        gpu_id=${gpus[$((task_index % ${#gpus[@]}))]}  # Assign GPU in round-robin
        cmd="python transfer_attack.py --num_models $n --target $target --target_length $target_length --device $gpu_id"
        echo "Assigning to GPU $gpu_id: $cmd"
        eval "commands_gpu$gpu_id+=(\"\$cmd\")"
        task_index=$((task_index + 1))
    done
done

# Now, for each GPU, run the commands sequentially in a background process
for gpu_id in "${gpus[@]}"; do
    cmds_var="commands_gpu$gpu_id[@]"
    cmds=( "${!cmds_var}" )
    (
        for cmd in "${cmds[@]}"; do
            echo "Running on GPU $gpu_id: $cmd"
            eval "$cmd"
        done
    ) &
done

# Wait for all background processes to finish
wait

echo "All tasks have been completed."
